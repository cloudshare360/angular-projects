import { test, expect } from '@playwright/test';

test.describe('Password Recovery - Forgot Password', () => {
  test.beforeEach(async ({ page }) => {
    await page.goto('/auth/login');
  });

  test('should navigate to forgot password page', async ({ page }) => {
    // Click forgot password link
    await page.click('a[routerLink="/auth/forgot-password"]');

    // Verify URL and page elements
    await expect(page).toHaveURL('/auth/forgot-password');
    await expect(page.locator('h2')).toContainText('Forgot Password');
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('button[type="submit"]')).toBeVisible();
  });

  test('should display forgot password form with all elements', async ({ page }) => {
    await page.goto('/auth/forgot-password');

    // Check form elements
    await expect(page.locator('h2')).toContainText('Forgot Password');
    await expect(page.locator('p')).toContainText('Enter your email');
    await expect(page.locator('input[type="email"]')).toBeVisible();
    await expect(page.locator('button[type="submit"]')).toBeVisible();
    await expect(page.locator('a[routerLink="/auth/login"]')).toBeVisible();
  });

  test('should validate email format', async ({ page }) => {
    await page.goto('/auth/forgot-password');

    // Try invalid email
    await page.fill('input[type="email"]', 'invalid-email');
    await page.click('button[type="submit"]');

    // Submit button should be disabled or show error
    const submitButton = page.locator('button[type="submit"]');
    const isDisabled = await submitButton.isDisabled();
    expect(isDisabled).toBeTruthy();
  });

  test('should submit valid email and show success message', async ({ page }) => {
    await page.goto('/auth/forgot-password');

    // Fill valid email
    await page.fill('input[type="email"]', 'john.doe@example.com');
    await page.click('button[type="submit"]');

    // Should show success message or navigate to success page
    await page.waitForTimeout(500);
    const successMessage = page.locator('.success-message, .success-screen');
    await expect(successMessage).toBeVisible();
  });

  test('should have back to login link', async ({ page }) => {
    await page.goto('/auth/forgot-password');

    // Click back to login
    await page.click('a[routerLink="/auth/login"]');
    await expect(page).toHaveURL('/auth/login');
  });

  test('should show loading state during submission', async ({ page }) => {
    await page.goto('/auth/forgot-password');

    // Fill email
    await page.fill('input[type="email"]', 'john.doe@example.com');

    // Submit and check for loading state
    await page.click('button[type="submit"]');

    // Button should show loading text
    const buttonText = await page.locator('button[type="submit"]').textContent();
    expect(buttonText).toContain('Sending');
  });

  test('should allow resending email', async ({ page }) => {
    await page.goto('/auth/forgot-password');

    // Submit email first
    await page.fill('input[type="email"]', 'john.doe@example.com');
    await page.click('button[type="submit"]');

    // Wait for success message
    await page.waitForTimeout(500);

    // Look for resend button
    const resendButton = page.locator('button:has-text("Resend")');
    if (await resendButton.isVisible()) {
      await resendButton.click();
      await expect(page.locator('.success-message')).toBeVisible();
    }
  });
});

test.describe('Password Recovery - Reset Password', () => {
  test('should display reset password page with token', async ({ page }) => {
    // Navigate to reset password with token
    await page.goto('/auth/reset-password?token=valid-token-123');

    // Verify page elements
    await expect(page.locator('h2')).toContainText('Reset Password');
    await expect(page.locator('input[type="password"]').first()).toBeVisible();
    await expect(page.locator('input[type="password"]').nth(1)).toBeVisible();
    await expect(page.locator('button[type="submit"]')).toBeVisible();
  });

  test('should show error for invalid or expired token', async ({ page }) => {
    // Navigate with invalid token
    await page.goto('/auth/reset-password?token=invalid-token');

    // Should show error message
    const errorMessage = page.locator('.error-message, .error-screen');
    await expect(errorMessage).toBeVisible();
  });

  test('should show error when accessing without token', async ({ page }) => {
    // Navigate without token
    await page.goto('/auth/reset-password');

    // Should show error or redirect
    const errorMessage = page.locator('.error-message, .error-screen');
    const isVisible = await errorMessage.isVisible().catch(() => false);

    if (!isVisible) {
      // Might redirect to login or show error
      await expect(page).toHaveURL(/login|reset-password/);
    }
  });

  test('should validate password requirements', async ({ page }) => {
    await page.goto('/auth/reset-password?token=valid-token-123');

    // Try weak password
    await page.fill('input[type="password"]').first().fill('123');
    await page.fill('input[type="password"]').nth(1).fill('123');

    // Should show password requirements
    const requirements = page.locator('.password-requirements, .validation-message');
    await expect(requirements).toBeVisible();
  });

  test('should validate password confirmation match', async ({ page }) => {
    await page.goto('/auth/reset-password?token=valid-token-123');

    // Fill mismatched passwords
    const passwordInput = page.locator('input[type="password"]').first();
    const confirmInput = page.locator('input[type="password"]').nth(1);

    await passwordInput.fill('Password123!');
    await confirmInput.fill('Different123!');

    // Should show error
    const errorMessage = page.locator('.error-message, .validation-message');
    await expect(errorMessage).toBeVisible();
  });

  test('should successfully reset password with valid input', async ({ page }) => {
    await page.goto('/auth/reset-password?token=valid-token-123');

    // Fill valid matching passwords
    const newPassword = 'NewPassword123!';
    await page.locator('input[type="password"]').first().fill(newPassword);
    await page.locator('input[type="password"]').nth(1).fill(newPassword);

    // Submit
    await page.click('button[type="submit"]');

    // Should show success and redirect to login
    await page.waitForTimeout(500);
    const successMessage = page.locator('.success-message, .success-screen');
    await expect(successMessage).toBeVisible();
  });

  test('should toggle password visibility', async ({ page }) => {
    await page.goto('/auth/reset-password?token=valid-token-123');

    // Look for password visibility toggle
    const toggleButton = page.locator('button:has-text("Show"), .toggle-password, [aria-label*="password"]').first();

    if (await toggleButton.isVisible()) {
      const passwordInput = page.locator('input[type="password"]').first();

      // Initially should be password type
      await expect(passwordInput).toHaveAttribute('type', 'password');

      // Click toggle
      await toggleButton.click();

      // Should change to text type
      await expect(passwordInput).toHaveAttribute('type', 'text');
    }
  });

  test('should show password strength indicator', async ({ page }) => {
    await page.goto('/auth/reset-password?token=valid-token-123');

    const passwordInput = page.locator('input[type="password"]').first();

    // Type weak password
    await passwordInput.fill('123');

    // Should show strength indicator
    const strengthIndicator = page.locator('.password-strength, .strength-indicator');
    const isVisible = await strengthIndicator.isVisible().catch(() => false);

    if (isVisible) {
      // Verify strength is shown as weak
      await expect(strengthIndicator).toBeVisible();
    }
  });

  test('should redirect to login after successful reset', async ({ page }) => {
    await page.goto('/auth/reset-password?token=valid-token-123');

    // Fill and submit
    const newPassword = 'StrongPassword123!';
    await page.locator('input[type="password"]').first().fill(newPassword);
    await page.locator('input[type="password"]').nth(1).fill(newPassword);
    await page.click('button[type="submit"]');

    // Wait for redirect (might have delay)
    await page.waitForTimeout(3500);

    // Should redirect to login
    await expect(page).toHaveURL('/auth/login');
  });

  test('should show loading state during password reset', async ({ page }) => {
    await page.goto('/auth/reset-password?token=valid-token-123');

    // Fill passwords
    const newPassword = 'NewPassword123!';
    await page.locator('input[type="password"]').first().fill(newPassword);
    await page.locator('input[type="password"]').nth(1).fill(newPassword);

    // Click submit and check loading state
    await page.click('button[type="submit"]');

    const button = page.locator('button[type="submit"]');
    const buttonText = await button.textContent();
    expect(buttonText).toContain('Resetting');
  });
});

test.describe('Password Recovery - Full Flow', () => {
  test('should complete full forgot to reset password flow', async ({ page }) => {
    // Step 1: Go to forgot password
    await page.goto('/auth/forgot-password');
    await expect(page.locator('h2')).toContainText('Forgot Password');

    // Step 2: Submit email
    await page.fill('input[type="email"]', 'john.doe@example.com');
    await page.click('button[type="submit"]');
    await page.waitForTimeout(500);

    // Step 3: Verify success message
    const successMessage = page.locator('.success-message, .success-screen');
    await expect(successMessage).toBeVisible();

    // Step 4: Navigate to reset password (simulating email link click)
    await page.goto('/auth/reset-password?token=valid-reset-token-789');

    // Step 5: Fill new password
    const newPassword = 'BrandNewPassword123!';
    await page.locator('input[type="password"]').first().fill(newPassword);
    await page.locator('input[type="password"]').nth(1).fill(newPassword);

    // Step 6: Submit reset
    await page.click('button[type="submit"]');
    await page.waitForTimeout(500);

    // Step 7: Verify success
    const resetSuccess = page.locator('.success-message, .success-screen');
    await expect(resetSuccess).toBeVisible();

    // Step 8: Should redirect to login
    await page.waitForTimeout(3500);
    await expect(page).toHaveURL('/auth/login');
  });
});
