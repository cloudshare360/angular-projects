#!/bin/bash

# Comprehensive Playwright E2E Test Runner
# Runs all E2E tests with proper setup and reporting

set -e

# Colors for output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
PURPLE='\033[0;35m'
NC='\033[0m'

# Configuration
FRONTEND_DIR="/home/sri/Documents/angular-projects/angular-18-todo-full-stack-app-back-front/Front-End/angular-18-todo-app"
BACKEND_DIR="/home/sri/Documents/angular-projects/angular-18-todo-full-stack-app-back-front/Back-End/express-rest-todo-api"
DATABASE_DIR="/home/sri/Documents/angular-projects/angular-18-todo-full-stack-app-back-front/data-base/mongodb"

echo -e "${PURPLE}‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó${NC}"
echo -e "${PURPLE}‚ïë           PLAYWRIGHT E2E TEST RUNNER                     ‚ïë${NC}"
echo -e "${PURPLE}‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù${NC}"

# Function to check if service is running
check_service() {
    local url=$1
    local service_name=$2
    local max_attempts=30
    local attempt=0
    
    echo -e "${BLUE}Checking ${service_name}...${NC}"
    
    while [ $attempt -lt $max_attempts ]; do
        if curl -s "$url" > /dev/null 2>&1; then
            echo -e "${GREEN}‚úÖ ${service_name} is ready${NC}"
            return 0
        fi
        attempt=$((attempt + 1))
        echo -e "${YELLOW}  Attempt $attempt/$max_attempts - waiting for ${service_name}...${NC}"
        sleep 2
    done
    
    echo -e "${RED}‚ùå ${service_name} failed to start${NC}"
    return 1
}

# Function to start services
start_services() {
    echo -e "\n${BLUE}üöÄ Starting required services...${NC}"
    
    # Start MongoDB
    echo -e "${YELLOW}Starting MongoDB...${NC}"
    cd "$DATABASE_DIR"
    sudo docker-compose up -d || echo -e "${YELLOW}‚ö†Ô∏è  MongoDB may already be running${NC}"
    
    # Start Backend API
    echo -e "${YELLOW}Starting Backend API...${NC}"
    cd "$BACKEND_DIR"
    pkill -f "node src/app.js" 2>/dev/null || true
    nohup npm start > api-server.log 2>&1 &
    
    # Start Frontend Development Server
    echo -e "${YELLOW}Starting Frontend Server...${NC}"
    cd "$FRONTEND_DIR"
    pkill -f "ng serve" 2>/dev/null || true
    nohup npm start > frontend-server.log 2>&1 &
    
    # Wait for services to be ready
    sleep 10
    check_service "http://localhost:3000/api/health" "Backend API"
    check_service "http://localhost:4200" "Frontend Server"
}

# Function to run specific test suites
run_test_suite() {
    local suite=$1
    echo -e "\n${PURPLE}üß™ Running ${suite} test suite...${NC}"
    
    cd "$FRONTEND_DIR"
    case $suite in
        "auth")
            npx playwright test e2e/tests/auth.spec.ts --reporter=html
            ;;
        "dashboard")
            npx playwright test e2e/tests/dashboard.spec.ts --reporter=html
            ;;
        "workflows")
            npx playwright test e2e/tests/workflows.spec.ts --reporter=html
            ;;
        "all")
            npx playwright test --reporter=html
            ;;
        *)
            echo -e "${RED}‚ùå Unknown test suite: $suite${NC}"
            return 1
            ;;
    esac
}

# Function to generate comprehensive report
generate_report() {
    echo -e "\n${BLUE}üìä Generating comprehensive test report...${NC}"
    
    cd "$FRONTEND_DIR"
    
    # Generate HTML report
    npx playwright show-report --host 0.0.0.0 &
    
    # Create summary report
    cat > test-summary.md << EOF
# üß™ Playwright E2E Test Report

**Date:** $(date)
**Environment:** Development
**Total Test Suites:** 3 (Authentication, Dashboard, Workflows)

## üìä Test Results Summary

### üîê Authentication Tests
- Login functionality
- Registration process
- Form validation
- Navigation flows

### üìã Dashboard Tests
- Todo CRUD operations
- List management
- Search and filtering
- User interface interactions

### üîÑ Workflow Tests
- End-to-end user journeys
- Cross-browser compatibility
- Mobile responsiveness
- Performance testing

## üåê Browser Coverage
- ‚úÖ Chromium (Desktop)
- ‚úÖ Firefox (Desktop)
- ‚úÖ WebKit/Safari (Desktop)
- ‚úÖ Mobile Chrome
- ‚úÖ Mobile Safari

## üì± Test Scenarios
1. **User Registration & Login**
2. **Todo Management Workflow**
3. **List Organization**
4. **Search & Filter Operations**
5. **Mobile Responsive Design**
6. **Cross-browser Compatibility**

## üîó Useful Links
- [Live Application](http://localhost:4200)
- [API Documentation](http://localhost:3000/api-docs)
- [HTML Wireframes](../../../html-wireframes/index.html)

---
*Generated by Playwright E2E Test Runner*
EOF

    echo -e "${GREEN}‚úÖ Test summary report created: test-summary.md${NC}"
}

# Function to cleanup services
cleanup_services() {
    echo -e "\n${YELLOW}üßπ Cleaning up services...${NC}"
    
    # Stop frontend server
    pkill -f "ng serve" 2>/dev/null || true
    
    # Stop backend server
    pkill -f "node src/app.js" 2>/dev/null || true
    
    echo -e "${GREEN}‚úÖ Cleanup completed${NC}"
}

# Main execution
main() {
    local test_suite=${1:-"all"}
    local headed=${2:-"false"}
    local ui_mode=${3:-"false"}
    
    echo -e "${BLUE}Test Suite: ${test_suite}${NC}"
    echo -e "${BLUE}Headed Mode: ${headed}${NC}"
    echo -e "${BLUE}UI Mode: ${ui_mode}${NC}"
    
    # Start services
    start_services
    
    # Run tests based on parameters
    cd "$FRONTEND_DIR"
    
    if [ "$ui_mode" = "true" ]; then
        echo -e "\n${PURPLE}üé® Starting Playwright UI mode...${NC}"
        npx playwright test --ui
    elif [ "$headed" = "true" ]; then
        echo -e "\n${PURPLE}üñ•Ô∏è  Running tests in headed mode...${NC}"
        npx playwright test --headed --reporter=html
    else
        echo -e "\n${PURPLE}ü§ñ Running tests in headless mode...${NC}"
        run_test_suite "$test_suite"
    fi
    
    # Generate report
    generate_report
    
    # Show results
    echo -e "\n${GREEN}üéâ Test execution completed!${NC}"
    echo -e "${YELLOW}üìä View detailed report at: http://localhost:9323${NC}"
    echo -e "${YELLOW}üìã Test summary: ${FRONTEND_DIR}/test-summary.md${NC}"
    
    # Ask if user wants to cleanup
    read -p "üßπ Clean up services? (y/n): " -n 1 -r
    echo
    if [[ $REPLY =~ ^[Yy]$ ]]; then
        cleanup_services
    fi
}

# Handle script arguments
case "${1:-}" in
    "auth")
        main "auth" "${2:-}" "${3:-}"
        ;;
    "dashboard")
        main "dashboard" "${2:-}" "${3:-}"
        ;;
    "workflows")
        main "workflows" "${2:-}" "${3:-}"
        ;;
    "headed")
        main "all" "true" "false"
        ;;
    "ui")
        main "all" "false" "true"
        ;;
    "help"|"-h"|"--help")
        echo -e "${BLUE}Usage: $0 [test_suite] [options]${NC}"
        echo -e "\nTest Suites:"
        echo -e "  auth      - Run authentication tests only"
        echo -e "  dashboard - Run dashboard tests only"
        echo -e "  workflows - Run workflow tests only"
        echo -e "  all       - Run all test suites (default)"
        echo -e "\nOptions:"
        echo -e "  headed    - Run tests with visible browser"
        echo -e "  ui        - Run tests in interactive UI mode"
        echo -e "\nExamples:"
        echo -e "  $0                    # Run all tests (headless)"
        echo -e "  $0 auth               # Run auth tests only"
        echo -e "  $0 headed             # Run all tests with visible browser"
        echo -e "  $0 ui                 # Run tests in UI mode"
        exit 0
        ;;
    *)
        main "all" "${2:-}" "${3:-}"
        ;;
esac